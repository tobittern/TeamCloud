<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.euler.statistics.mapper.KeepDataStatisticsMapper">

    <resultMap type="com.euler.statistics.api.domain.KeepDataStatistics" id="KeepDataStatisticsResult">
        <result property="id" column="id"/>
        <result property="batchNo" column="batch_no"/>
        <result property="memberId" column="member_id"/>
        <result property="packageCode" column="package_code"/>
        <result property="channelId" column="channel_id"/>
        <result property="channelName" column="channel_name"/>
        <result property="gameId" column="game_id"/>
        <result property="gameName" column="game_name"/>
        <result property="operationPlatform" column="operation_platform"/>
        <result property="registTime" column="regist_time"/>
        <result property="loginTime" column="login_time"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

    <resultMap type="com.euler.statistics.domain.vo.KeepDataStatisticsVo" id="BaseUserRegisterListVoResult">
        <result property="date" column="date"/>
        <result property="channelName" column="channel_name"/>
        <result property="packageCode" column="package_code"/>
        <result property="gameName" column="game_name"/>
        <result property="operationPlatform" column="operation_platform"/>
        <result property="newUserNum" column="newUserNum"/>
        <result property="day2" column="day2"/>
        <result property="day3" column="day3"/>
        <result property="day4" column="day4"/>
        <result property="day5" column="day5"/>
        <result property="day6" column="day6"/>
        <result property="day7" column="day7"/>
        <result property="day15" column="day15"/>
        <result property="day30" column="day30"/>
        <result property="day60" column="day60"/>
        <result property="day90" column="day90"/>
        <result property="remain2" column="remain2"/>
        <result property="remain3" column="remain3"/>
        <result property="remain4" column="remain4"/>
        <result property="remain5" column="remain5"/>
        <result property="remain6" column="remain6"/>
        <result property="remain7" column="remain7"/>
        <result property="remain15" column="remain15"/>
        <result property="remain30" column="remain30"/>
        <result property="remain60" column="remain60"/>
        <result property="remain90" column="remain90"/>
    </resultMap>

    <insert id="fillKeepData">
        INSERT INTO keep_data_statistics(batch_no, member_id, game_id, game_name, channel_id, channel_name,
               package_code, regist_time, login_time, operation_platform, create_time, role_id, role_name, server_id, server_name)
        SELECT
               #{batchNo}                              batch_no,
               gu.member_id,
               gu.game_id,
               gu.game_name,
               ifnull(gu.channel_id, 0)                channel_id,
               ifnull(gu.channel_name, '默认渠道')       channel_name,
               gu.package_code                         package_code,
               DATE_FORMAT(gu.create_time, '%Y-%m-%d') regist_time,
               DATE_FORMAT(gu.update_time, '%Y-%m-%d') login_time,
               og.operation_platform,-- 游戏平台：1、安卓，2、ios，3、h5
               NOW()                                   create_time,
               gu.role_id,
               gu.role_name,
               gu.server_id,
               gu.server_name
        FROM game_user_management gu
        INNER JOIN open_game og ON gu.game_id = og.id
        WHERE (gu.update_time BETWEEN #{beginTime} AND #{endTime})
            OR (gu.create_time BETWEEN #{beginTime} AND #{endTime})
    </insert>

    <select id="getKeepList" resultMap="BaseUserRegisterListVoResult">
         SELECT
            DATE_FORMAT(regist_time, '%Y-%m-%d') date,
            package_code,
            ifnull(channel_name, '默认渠道') channel_name,
            game_name,
            operation_platform,
            COUNT(DISTINCT member_id) newUserNum,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=1 THEN member_id ELSE NULL END) day2,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=2 THEN member_id ELSE NULL END) day3,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=3 THEN member_id ELSE NULL END) day4,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=4 THEN member_id ELSE NULL END) day5,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=5 THEN member_id ELSE NULL END) day6,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=6 THEN member_id ELSE NULL END) day7,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=14 THEN member_id ELSE NULL END) day15,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=29 THEN member_id ELSE NULL END) day30,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=59 THEN member_id ELSE NULL END) day60,
            COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=89 THEN member_id ELSE NULL END) day90,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=1 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain2,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=2 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain3,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=3 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain4,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=4 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain5,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=5 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain6,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=6 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain7,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=14 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain15,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=29 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain30,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=59 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain60,
            CONCAT(ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(login_time, regist_time)=89 THEN member_id ELSE NULL END)/COUNT(DISTINCT member_id)*100, 2), '%') remain90
        FROM keep_data_statistics ${ew.getCustomSqlSegment}
    </select>
</mapper>

