package ${packageName}.service.impl;

import cn.hutool.core.bean.BeanUtil;
import com.euler.common.core.utils.StringUtils;
import com.euler.common.core.utils.DateUtils;
import com.euler.common.mybatis.core.page.TableDataInfo;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import ${packageName}.domain.bo.${ClassName}Bo;
import ${packageName}.domain.vo.${ClassName}Vo;
import ${packageName}.domain.dto.${ClassName}PageDto;
import ${packageName}.domain.entity.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;

import java.util.List;
import java.util.Map;
import java.util.Collection;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@RequiredArgsConstructor
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service {

    @Autowired
    private  ${ClassName}Mapper baseMapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName}Vo queryById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return baseMapper.selectVoById(${pkColumn.javaField});
    }


    /**
     * 查询${functionName}列表
     *
     * @param pageDto ${functionName}
     * @return ${functionName}
    */
    @Override
    public TableDataInfo<${ClassName}Vo> queryPageList(${ClassName}PageDto pageDto) {
        LambdaQueryWrapper<${ClassName}> lqw = buildQueryWrapper(pageDto);
        Page<${ClassName}Vo> result = baseMapper.selectVoPage(pageDto.build(), lqw);
        return TableDataInfo.build(result);
    }


    /**
     * 查询${functionName}列表
     *
     * @param pageDto ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}Vo> queryList(${ClassName}PageDto pageDto) {
        LambdaQueryWrapper<${ClassName}> lqw = buildQueryWrapper(pageDto);
        return baseMapper.selectVoList(lqw);
    }

    private LambdaQueryWrapper<${ClassName}> buildQueryWrapper(${ClassName}PageDto pageDto) {
        LambdaQueryWrapper<${ClassName}> lqw = Wrappers.lambdaQuery();
        #foreach($column in $columns)
            #if($column.query)
                #set($queryType=$column.queryType)
                #set($javaField=$column.javaField)
                #set($javaType=$column.javaType)
                #set($columnName=$column.columnName)
                #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
                #set($mpMethod=$column.queryType.toLowerCase())
                    #if($javaType == 'String')
                        #set($condition='StringUtils.isNotBlank(pageDto.get'+$AttrName+'())')
                    #else
                        #set($condition='pageDto.get'+$AttrName+'() != null')
                    #end
                    lqw.$mpMethod($condition, ${ClassName}::get$AttrName, pageDto.get$AttrName());
            #end
        #end
                    lqw.ge(StringUtils.isNotBlank(pageDto.getBeginTime()), ${ClassName}::getCreateTime, DateUtils.getBeginOfDay(pageDto.getBeginTime()));
                    lqw.le(StringUtils.isNotBlank(pageDto.getEndTime()), ${ClassName}::getCreateTime, DateUtils.getEndOfDay(pageDto.getEndTime()));
        return lqw;
    }

    /**
     * 新增${functionName}
     *
     * @param bo ${functionName}
     * @return 结果
     */
    @Override
    public Boolean insertByBo(${ClassName}Bo bo) {
        ${ClassName} add = BeanUtil.toBean(bo, ${ClassName}. class);
        boolean flag = baseMapper.insert(add) > 0;
        #set($pk=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
        if (flag) {
            bo.set$pk(add.get$pk());
        }
        return flag;
    }

    /**
     * 修改${functionName}
     *
     * @param bo ${functionName}
     * @return 结果
     */
    @Override
    public Boolean updateByBo(${ClassName}Bo bo) {
        ${ClassName} update = BeanUtil.toBean(bo, ${ClassName}. class);
        return baseMapper.updateById(update) > 0;
    }



    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
    @Override
    public Boolean deleteWithValidByIds(Collection<${pkColumn.javaType}> ids) {
        return baseMapper.deleteBatchIds(ids) > 0;
    }
}
